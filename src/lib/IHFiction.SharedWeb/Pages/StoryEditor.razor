@using IHFiction.SharedKernel.Infrastructure
@using IHFiction.SharedWeb.Components.MarkdownEditor
@using IHFiction.Data.Stories.Domain
@using System.Globalization

@using System.Linq
@using static IHFiction.SharedWeb.Services.StoryEditorService
@using static IHFiction.Data.Stories.Domain.StoryType

@page "/stories/new"
@page "/stories/{StoryId}/edit"

@attribute [Authorize(Roles = "author")]
@inherits CancellableComponent
@inject StoryEditorService EditorService
@inject NavigationManager Navigation

<h1>@(EditorService.CurrentStory?.Id == default ? "Create New Story" : "Edit Story")</h1>

@if (_isBusy)
{
    <div class="modal is-active">
        <div class="modal-background"></div>
        <div class="modal-content has-text-centered">
            <div class="box">
                <span class="icon is-large">
                    <i class="fas fa-spinner fa-pulse fa-2x"></i>
                </span>
                <p class="is-size-5 mt-3">Workingâ€¦</p>
            </div>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="section">
        <div class="container">
            <div class="notification is-danger">
                <button class="delete" @onclick="e => _errorMessage = string.Empty"></button>
                <strong>Error:</strong> @_errorMessage
            </div>
        </div>
    </div>
}
@if (EditorService.CurrentStory is null)
{
    <div class="section">
        <div class="container has-text-centered">
            <span class="icon is-large">
                <i class="fas fa-spinner fa-pulse fa-2x"></i>
            </span>
            <p>Loading...</p>
        </div>
    </div>
}
else
{
    <div class="columns">
        <div class="column is-two-thirds">
            <div class="field">
                <label class="label">Title</label>
                <div class="control">
                    <input class="input" type="text" @bind="EditorService.CurrentStory.Title" @bind:event="oninput" />
                </div>
            </div>

            <div class="field">
                <label class="label">Description</label>
                <div class="control">
                    <textarea class="textarea" @bind="EditorService.CurrentStory.Description"
                        @bind:event="oninput"></textarea>
                </div>
            </div>
        </div>
        <div class="column">
            @if (EditorService.CurrentStory.Id != default)
            {
                <div class="section">
                    <h3 class="subtitle">Story Settings</h3>
                    <div class="field">
                        <label class="label">Story Type: @GetLabel(EditorService.CurrentStory.StoryType)</label>
                        <div class="control">
                            <div class="dropdown is-hoverable">
                                <div class="dropdown-trigger">
                                    <button class="button" aria-haspopup="true" aria-controls="dropdown-menu">
                                        <span>Change Type</span>
                                    </button>
                                </div>
                                <div class="dropdown-menu" id="dropdown-menu" role="menu">
                                    <div class="dropdown-content">
                                        @foreach (string storyType in new HashSet<string>([
                                                                        SingleBody,
                                                                MultiChapter,
                                                                MultiBook]).Where(IsConversionAllowed))
                                        {
                                            <a @key="storyType" class="dropdown-item"
                                                @onclick="e => ConvertStory(storyType)">@GetLabel(storyType)</a>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    <hr />

    @switch (EditorService.CurrentStory.StoryType)
    {
        case SingleBody or New:
            <div class="field">
                <label class="label">Author's Notes (Start)</label>
                <div class="control" style="height: 200px">
                    <Editor @bind-Value="EditorService.CurrentStory.Note1" CharacterLimit="5000" />
                </div>
            </div>
            <div class="field">
                <label class="label">Content</label>
                <div class="control" style="height: 500px">
                    <Editor @bind-Value="EditorService.CurrentStory.Content" CharacterLimit="1000000" />
                </div>
            </div>
            <div class="field">
                <label class="label">Author's Notes (End)</label>
                <div class="control" style="height: 200px">
                    <Editor @bind-Value="EditorService.CurrentStory.Note2" CharacterLimit="5000" />
                </div>
            </div>
            break;
        case MultiChapter:
            <ChapterManager />
            break;
        case MultiBook:
            <BookManager />
            break;
    }

    <hr />

    <div class="field is-grouped">
        <div class="control">
            <!-- Save: always visible, enabled only if dirty -->
            <button class="button is-info" disabled="@(_isBusy || !(EditorService.CurrentStory?.Dirty ?? false))"
                @onclick="e => Save(false)">
                Save
            </button>
        </div>
        @if (CanPublish)
        {
            <div class="control">
                <!-- Save and Publish: visible only if not published, enabled only if not published -->
                <button class="button is-success" disabled="@(_isBusy || !(EditorService.CurrentStory?.Dirty ?? false))"
                    @onclick="PublishStory">
                    Save and Publish
                </button>
            </div>
            <div class="control">
                <!-- Publish: visible and enabled only if not published -->
                <button class="button is-warning" disabled="@(_isBusy || (EditorService.CurrentStory?.Dirty ?? false))"
                    @onclick="PublishOnly">
                    Publish
                </button>
            </div>
        }
        <div class="control">
            <button class="button is-light" @onclick="Cancel" disabled="@_isBusy">Cancel</button>
        </div>
    </div>
}

@code {
    [Parameter]
    public string? StoryId { get; set; }

    public bool CanPublish => EditorService.CurrentStory?.IsPublished == false
    || EditorService.CurrentBook?.IsPublished == false
    || EditorService.CurrentChapter?.IsPublished == false;

    private bool _disposed;
    private string? _errorMessage;
    private bool _isBusy;

    protected override async Task OnInitializedAsync()
    {
        EditorService.StoryChanged += OnStoryChanged;
        EditorService.DirtyStateChanged += OnDirtyStateChanged;
        EditorService.BookChanged += OnBookChanged;

        var result = await LoadStory();

        if (result.IsFailure) _errorMessage = result.DomainError.Description;
    }

    private async Task<Result> LoadStory()
    {
        DomainError? _error = default;

        if (StoryId is not null && Ulid.TryParse(StoryId, out var storyId))
        {
            var result = await EditorService.LoadStoryAsync(storyId, CancellationToken);

            if (result.IsFailure) _error = result.DomainError;
        }
        else
        {
            // This is a new story
            EditorService.CreateNewStory(SingleBody);
        }

        if (_error is null && EditorService.CurrentStory is { StoryType: MultiBook, Books.Count: > 0 } bookStory)
        {
            var firstBook = bookStory.Books
            .OrderBy(b => b.Order)
            .FirstOrDefault();

            if (firstBook?.Id is { } bookId && bookId != default)
            {
                var result = await EditorService.LoadBookAsync(bookId);

                if (result.IsFailure) _error = result.DomainError;

                if (_error is null && result.Value!.Chapters.Count > 0)
                {
                    var firstChapter = result.Value.Chapters
                    .OrderBy(c => c.Order)
                    .FirstOrDefault();

                    if (firstChapter?.Id is { } bookChapterId && bookChapterId != default)
                    {
                        var bookChapterResult = await EditorService
                        .LoadChapterAsync(bookChapterId, CancellationToken);

                        if (bookChapterResult.IsFailure) _error = bookChapterResult.DomainError;
                    }
                }
            }
        }

        if (_error is null && EditorService.CurrentStory is { StoryType: MultiChapter, Chapters.Count: > 0 } chapterStory)
        {
            var firstChapter = chapterStory.Chapters
            .OrderBy(c => c.Order)
            .FirstOrDefault();

            if (firstChapter?.Id is { } storyChapterId && storyChapterId != default)
            {
                var storyChapterResult = await EditorService.LoadChapterAsync(storyChapterId, CancellationToken);

                if (storyChapterResult.IsFailure) _error = storyChapterResult.DomainError;
            }
        }

        if(_error is not null) _errorMessage = _error.Description;

        return _error is null ? Result.Success() : Result.Failure(_error);
    }

    private void OnBookChanged(object? sender, BookChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private void OnStoryChanged(object? sender, StoryChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private void OnDirtyStateChanged(object? sender, DirtyStateChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    protected override ValueTask DisposeAsyncCore()
    {
        if (_disposed) return ValueTask.CompletedTask;

        EditorService.StoryChanged -= OnStoryChanged;
        EditorService.DirtyStateChanged -= OnDirtyStateChanged;
        EditorService.BookChanged -= OnBookChanged;

        _disposed = true;

        return base.DisposeAsyncCore();
    }

    private bool IsConversionAllowed(string targetType)
    {
        if (EditorService.CurrentStory is null) return false;
        if (EditorService.CurrentStory.StoryType == targetType) return false;

        return (EditorService.CurrentStory.StoryType, targetType) switch
        {
            (SingleBody, MultiChapter) => true,
            (MultiChapter, SingleBody) => EditorService.CurrentStory.Chapters.Count == 1,
            (MultiChapter, MultiBook) => true,
            (MultiBook, MultiChapter) => EditorService.CurrentStory.Books.Count == 1,
            _ => false
        };
    }

    private async Task ConvertStory(string targetType)
    {
        if (!IsConversionAllowed(targetType) || EditorService.CurrentStory is null) return;

        _isBusy = true;

        StateHasChanged();

        var result = await EditorService.ConvertStoryTypeAsync(targetType);

        if (result.IsSuccess) result = await LoadStory();

        if (result.IsFailure) _errorMessage = result.DomainError.Description;

        _isBusy = false;

        StateHasChanged();
    }

    private async Task Save(bool andPublish)
    {
        if (EditorService.CurrentStory is null) return;

        _isBusy = true;
        _errorMessage = null;

        StateHasChanged();

        var result = await EditorService.SaveStoryAsync();

        if (result.IsSuccess && andPublish) result = await EditorService.PublishStoryAsync();

        if (result.IsFailure) _errorMessage = result.DomainError.Description;

        else Navigation.NavigateTo("/my-stories");

        // keep busy until navigation occurs; if navigation didn't happen, clear flag
        if (result.IsSuccess) EditorService.Reset();

        _isBusy = false;

        StateHasChanged();
    }

    private async Task PublishStory()
    {
        await Save(andPublish: true);
    }

    private async Task PublishOnly()
    {
        if (EditorService.CurrentStory is null) return;

        _isBusy = true;
        _errorMessage = null;

        StateHasChanged();

        var publishResult = await EditorService.PublishStoryAsync();

        if (publishResult.IsFailure) _errorMessage = publishResult.DomainError.Description;

        else Navigation.NavigateTo("/my-stories");

        _isBusy = false;

        StateHasChanged();
    }

    private void Cancel()
    {
        if (_isBusy) return;
        _isBusy = true;
        Navigation.NavigateTo("/my-stories");
    }

    private static string GetLabel(string storyType) => storyType switch
    {
        SingleBody => "One-Shot",
        MultiChapter => "Chaptered",
        MultiBook => "Book-based",
        _ => "Unknown"
    };
}