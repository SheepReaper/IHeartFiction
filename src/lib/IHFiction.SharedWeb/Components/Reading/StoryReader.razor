@using Markdig
@using System.Linq
@using static IHFiction.Data.Stories.Domain.StoryType
@inherits CancellableComponent
@inject StoryService StoryService
@inject ThemeService theme
@inject IJSRuntime js
@inject MarkdownPipeline mdp

@if (isLoading)
{
    <div class="section">
        <div class="content has-text-centered">
            <span class="icon is-large has-text-grey-light">
                <i class="fas fa-file-alt fa-3x"></i>
            </span>
            <h2 class="title is-4 has-text-grey">No content available</h2>
            <p class="has-text-grey">This story doesn't have any content yet.</p>
        </div>
    </div>
}
else if (story != null)
{
    <div class="section">
        <div class="container">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="notification is-danger">
                    <button class="delete" @onclick="e => errorMessage = null"></button>
                    @errorMessage
                </div>
            }
            <!-- Story Header -->
            <div class="level">
                <div class="level-left">
                    <div class="level-item">
                        <div>
                            <h1 class="title is-3">@story?.Title</h1>
                            <p class="subtitle is-5 has-text-grey">
                                by @foreach (var author in story?.Authors ?? [])
                                {
                                    <a @key="author.Id" href="/authors/@author.Id" class="has-text-grey">@author.Name</a>
                                    @if (author != story?.Authors.Last())
                                    {
                                        <text>, </text>
                                    }
                                }
                            </p>
                        </div>
                    </div>
                </div>
                <div class="level-right">
                    <div class="level-item">
                        <a href="/stories/@story?.Id" class="button is-light">
                            <span class="icon">
                                <i class="fas fa-info-circle"></i>
                            </span>
                            <span>Story Details</span>
                        </a>
                    </div>
                </div>
            </div>

            @switch (story?.Type)
            {
                case MultiBook:
                    <div class="columns">
                        <div class="column is-narrow">
                            <aside class="menu">
                                <p class="menu-label">Books</p>
                                <ul class="menu-list">
                                    @if (story.Books?.Any() ?? false)
                                    {
                                        foreach (var book in story.Books.OrderBy(b => b.Order))
                                        {
                                            <li @key="book.Id">
                                                <a class="@(book.Id.ToString() == CurrentBookId ? "is-active" : "")"
                                                    @onclick="e => SelectBook(book.Id.ToString())">
                                                    @book.Title
                                                </a>
                                                @if (book.Id.ToString() == CurrentBookId && (book.Chapters?.Any() ?? false))
                                                {
                                                    <ul>
                                                        @foreach (var chapter in book.Chapters.OrderBy(c => c.Order))
                                                        {
                                                            <li @key="chapter.Id">
                                                                <a class="@(chapter.Id.ToString() == CurrentChapterId ? "is-active" : "")"
                                                                    @onclick="@(e => SelectChapter(book.Id.ToString(), chapter.Id.ToString()))">
                                                                    @chapter.Title
                                                                </a>
                                                            </li>
                                                        }
                                                    </ul>
                                                }
                                            </li>
                                        }
                                    }
                                </ul>
                            </aside>
                        </div>
                        <div class="column">
                            @if (!string.IsNullOrEmpty(CurrentChapterId))
                            {
                                <ChapterReader ChapterId="@CurrentChapterId" />
                            }
                            else
                            {
                                <div class="content has-text-centered">
                                    <h2 class="title is-4">Select a Chapter</h2>
                                    <p>Choose a chapter from the menu to start reading.</p>
                                </div>
                            }
                        </div>
                    </div>
                    break;
                case MultiChapter:
                    <div class="columns">
                        <div class="column is-narrow">
                            <aside class="menu">
                                <p class="menu-label">Chapters</p>
                                <ul class="menu-list">
                                    @if (story.Chapters?.Any() ?? false)
                                    {
                                        foreach (var chapter in story.Chapters.OrderBy(c => c.Order))
                                        {
                                            <li @key="chapter.Id">
                                                <a href="/stories/@story.Id/chapters/@chapter.Id"
                                                    class="@(chapter.Id.ToString() == CurrentChapterId ? "is-active" : "")"
                                                    @onclick="e => SelectChapter(null, chapter.Id.ToString())">
                                                    @chapter.Title
                                                </a>
                                            </li>
                                        }
                                    }
                                </ul>
                            </aside>
                        </div>
                        <div class="column">
                            @if (!string.IsNullOrEmpty(CurrentChapterId))
                            {
                                <ChapterReader ChapterId="@CurrentChapterId" />
                            }
                            else
                            {
                                <div class="content has-text-centered">
                                    <h2 class="title is-4">Select a Chapter</h2>
                                    <p>Choose a chapter from the menu to start reading.</p>
                                </div>
                            }
                        </div>
                    </div>
                    break;
                default: // SingleBody
                    @if (storyContent != null)
                    {
                        <div class="content">
                            @if (!string.IsNullOrWhiteSpace(storyContent.Note1))
                            {
                                <div class="message is-info">
                                    <div class="message-header">
                                        <p>Author's Notes</p>
                                    </div>
                                    <div class="message-body">
                                        <div class="content">@((MarkupString)Markdown.ToHtml(storyContent.Note1, mdp))</div>
                                    </div>
                                </div>
                            }
                            <div class="box content">
                                @((MarkupString)Markdown.ToHtml(storyContent?.Content ?? string.Empty, mdp))
                            </div>
                            @if (!string.IsNullOrWhiteSpace(storyContent?.Note2))
                            {
                                <div class="message is-info">
                                    <div class="message-header">
                                        <p>Author's Notes</p>
                                    </div>
                                    <div class="message-body">
                                        <div class="content">@((MarkupString)Markdown.ToHtml(storyContent.Note2, mdp))</div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="content has-text-centered">
                            <span class="icon is-large has-text-grey-light">
                                <i class="fas fa-file-alt fa-3x"></i>
                            </span>
                            <h2 class="title is-4 has-text-grey">No content available</h2>
                            <p class="has-text-grey">This story doesn't have any content yet.</p>
                        </div>
                    }
                    break;
            }
        </div>
    </div>
}

@code {
    [Parameter, EditorRequired] public string StoryId { get; set; } = null!;
    [Parameter] public string? CurrentChapterId { get; set; }

    private LinkedOfGetPublishedStoryResponse? story;
    private IEnumerable<ChapterItem>? chapters;
    private LinkedOfGetPublishedStoryContentResponse? storyContent;
    private bool isLoading = true;
    private string? errorMessage;
    private bool _disposed = false;

    protected override async Task OnInitializedAsync()
    {
        theme.ThemeChanged += OnThemeChanged;
        await LoadStory();
        SetTheme();
    }

    private void OnThemeChanged(object? sender, ThemeChangedEventArgs e)
    {
        SetTheme();
    }

    private void SetTheme()
    {
        InvokeAsync(StateHasChanged);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (story?.Id.ToString() != StoryId)
        {
            await LoadStory();
        }
    }

    private async Task LoadStory()
    {
        isLoading = true;
        errorMessage = null;

        var storyResult = await StoryService.GetStoryAsync(StoryId);

        if (storyResult.IsSuccess)
        {
            story = storyResult.Value;

            if (story?.Type == MultiBook)
            {
                // Auto-select the first book and chapter by Order if none is selected
                if ((story.Books?.Any() ?? false) && string.IsNullOrEmpty(CurrentBookId))
                {
                    var firstBook = story.Books.OrderBy(b => b.Order).First();
                    CurrentBookId = firstBook.Id.ToString();
                    if (firstBook.Chapters?.Any() == true)
                    {
                        CurrentChapterId = firstBook.Chapters.OrderBy(c => c.Order).First().Id.ToString();
                    }
                    else
                    {
                        CurrentChapterId = null;
                    }
                }
            }
            else if (story?.Type == MultiChapter)
            {
                chapters = story.Chapters?.OrderBy(c => c.Order).ToList();
                // Auto-select the first chapter by Order if none is selected
                if (string.IsNullOrEmpty(CurrentChapterId) && (chapters?.Any() ?? false))
                {
                    CurrentChapterId = chapters!.First().Id.ToString();
                }
            }
            else if (story?.Type == SingleBody)
            {
                // Load content for single story
                var contentResult = await StoryService.GetPublishedStoryContentAsync(StoryId);

                if (contentResult.IsSuccess)
                {
                    storyContent = contentResult.Value;
                }
            }
        }
        else
        {
            errorMessage = storyResult.DomainError.Description;
        }

        isLoading = false;
        StateHasChanged();
    }

    protected override ValueTask DisposeAsyncCore()
    {
        if (_disposed) return ValueTask.CompletedTask;

        theme.ThemeChanged -= OnThemeChanged;

        _disposed = true;

        return base.DisposeAsyncCore();
    }
    private string? CurrentBookId;

    private void SelectBook(string bookId)
    {
        CurrentBookId = bookId;
        // Auto-select first chapter in the book (by Order) if available
        var book = story?.Books?.FirstOrDefault(b => b.Id.ToString() == bookId);
        if (book?.Chapters?.Any() == true)
        {
            chapters = book.Chapters.OrderBy(c => c.Order).ToList();
            CurrentChapterId = book.Chapters.OrderBy(c => c.Order).First().Id.ToString();
        }
        else
        {
            CurrentChapterId = null;
        }
    }

    private void SelectChapter(string? bookId, string chapterId)
    {
        if (bookId != null)
            CurrentBookId = bookId;
        CurrentChapterId = chapterId;
    }
}