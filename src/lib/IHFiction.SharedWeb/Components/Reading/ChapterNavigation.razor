@inject StoryService StoryService

@if (chapters?.Data?.Any() == true)
{
    var publishedChapters = chapters.Data.Where(c => c.PublishedAt.HasValue).OrderBy(c => c.PublishedAt).ToList();
    var currentIndex = publishedChapters.FindIndex(c => c.ChapterId.ToString() == CurrentChapterId);
    var previousChapter = currentIndex > 0 ? publishedChapters[currentIndex - 1] : null;
    var nextChapter = currentIndex >= 0 && currentIndex < publishedChapters.Count - 1 ? publishedChapters[currentIndex + 1] : null;

    <div class="field is-grouped">
        @if (previousChapter != null)
        {
            <div class="control">
                <a href="/stories/@StoryId/chapters/@previousChapter.ChapterId" class="button">
                    <span class="icon">
                        <i class="fas fa-chevron-left"></i>
                    </span>
                    @if (ShowLabels)
                    {
                        <span>Previous</span>
                    }
                </a>
            </div>
        }
        else if (ShowLabels)
        {
            <div class="control">
                <button class="button" disabled>
                    <span class="icon">
                        <i class="fas fa-chevron-left"></i>
                    </span>
                    <span>Previous</span>
                </button>
            </div>
        }

        @if (ShowLabels && currentIndex >= 0)
        {
            <div class="control">
                <span class="button is-static">
                    Chapter @(currentIndex + 1) of @publishedChapters.Count
                </span>
            </div>
        }

        @if (nextChapter != null)
        {
            <div class="control">
                <a href="/stories/@StoryId/chapters/@nextChapter.ChapterId" class="button">
                    @if (ShowLabels)
                    {
                        <span>Next</span>
                    }
                    <span class="icon">
                        <i class="fas fa-chevron-right"></i>
                    </span>
                </a>
            </div>
        }
        else if (ShowLabels)
        {
            <div class="control">
                <button class="button" disabled>
                    <span>Next</span>
                    <span class="icon">
                        <i class="fas fa-chevron-right"></i>
                    </span>
                </button>
            </div>
        }
    </div>
}

@code {
    [Parameter, EditorRequired] public string StoryId { get; set; } = null!;
    [Parameter, EditorRequired] public string CurrentChapterId { get; set; } = null!;
    [Parameter] public bool ShowLabels { get; set; } = false;

    private LinkedPagedCollectionOfListStoryChaptersItem? chapters;

    protected override async Task OnInitializedAsync()
    {
        await LoadChapters();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (chapters == null)
        {
            await LoadChapters();
        }
    }

    private async Task LoadChapters()
    {
        var result = await StoryService.ListStoryChaptersAsync(StoryId);

        if (result.IsSuccess)
        {
            chapters = result.Value;
            StateHasChanged();
        }
    }
}
