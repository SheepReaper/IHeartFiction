@inject NavigationManager Navigation
@inject LoaderService LoaderService

<AuthorizeView>
    <Authorized>
        <div class="navbar-item has-dropdown is-hoverable">
            <a class="navbar-link">
                @context.User.Identity?.Name
            </a>

            <div class="navbar-dropdown">
                @* <form action="authentication/logout" method="post">
                    <AntiforgeryToken />
                    <input type="hidden" name="ReturnUrl" value="@Navigation.Uri" />
                    <button type="submit" class="navbar-item">
                        Log out
                    </button>
                </form> *@
                <a class="navbar-item" @onclick="OnLogoutClick" disabled="@_loading">
                    Log out
                </a>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="buttons">
            <button class="button is-primary" @onclick="OnSignUpClick" disabled="@_loading">
                <strong>Sign up</strong>
            </button>
            <button class="button is-light" @onclick="OnLoginClick" disabled="@_loading">
                Log in
            </button>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    private bool _loading;

    private void OnSignUpClick() => OnLoginClick();

    private void OnLoginClick()
    {
        _loading = true;
        LoaderService.Show();
        Navigation.NavigateTo($"authentication/login?returnUrl={ReturnUrl ?? Navigation.Uri}", forceLoad: true);
    }

    private void OnLogoutClick()
    {
        _loading = true;
        LoaderService.Show();
        Navigation.NavigateTo($"authentication/logout", forceLoad: true);
    }
}