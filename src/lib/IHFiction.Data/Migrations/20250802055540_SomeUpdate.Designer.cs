// <auto-generated />
using System;
using IHFiction.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IHFiction.Data.Migrations
{
    [DbContext(typeof(FictionDbContext))]
    [Migration("20250802055540_SomeUpdate")]
    partial class SomeUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("ihfiction.dev2")
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AnthologyStory", b =>
                {
                    b.Property<string>("AnthologiesId")
                        .HasColumnType("character varying(26)")
                        .HasColumnName("anthologies_id");

                    b.Property<string>("StoriesId")
                        .HasColumnType("character varying(26)")
                        .HasColumnName("stories_id");

                    b.HasKey("AnthologiesId", "StoriesId")
                        .HasName("pk_anthology_story");

                    b.HasIndex("StoriesId")
                        .HasDatabaseName("ix_anthology_story_stories_id");

                    b.ToTable("anthology_story", "ihfiction.dev2");
                });

            modelBuilder.Entity("AuthorWork", b =>
                {
                    b.Property<string>("AuthorsId")
                        .HasColumnType("character varying(26)")
                        .HasColumnName("authors_id");

                    b.Property<string>("WorksId")
                        .HasColumnType("character varying(26)")
                        .HasColumnName("works_id");

                    b.HasKey("AuthorsId", "WorksId")
                        .HasName("pk_author_work");

                    b.HasIndex("WorksId")
                        .HasDatabaseName("ix_author_work_works_id");

                    b.ToTable("author_work", "ihfiction.dev2");
                });

            modelBuilder.Entity("IHFiction.Data.Authors.Domain.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("discriminator");

                    b.Property<string>("GravatarEmail")
                        .HasColumnType("text")
                        .HasColumnName("gravatar_email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", "ihfiction.dev2");

                    b.HasDiscriminator().HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("IHFiction.Data.Searching.Domain.Tag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("discriminator");

                    b.Property<string>("Subcategory")
                        .HasColumnType("text")
                        .HasColumnName("subcategory");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_tags");

                    b.ToTable("tags", "ihfiction.dev2");

                    b.HasDiscriminator().HasValue("Tag");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("IHFiction.Data.Stories.Domain.Work", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("discriminator");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("character varying(26)")
                        .HasColumnName("owner_id");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("published_at");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_work");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_work_owner_id");

                    b.HasIndex("Title")
                        .HasDatabaseName("ix_work_title");

                    b.ToTable("work", "ihfiction.dev2");

                    b.HasDiscriminator().HasValue("Work");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TagWork", b =>
                {
                    b.Property<string>("TagsId")
                        .HasColumnType("character varying(26)")
                        .HasColumnName("tags_id");

                    b.Property<string>("WorksId")
                        .HasColumnType("character varying(26)")
                        .HasColumnName("works_id");

                    b.HasKey("TagsId", "WorksId")
                        .HasName("pk_tag_work");

                    b.HasIndex("WorksId")
                        .HasDatabaseName("ix_tag_work_works_id");

                    b.ToTable("tag_work", "ihfiction.dev2");
                });

            modelBuilder.Entity("IHFiction.Data.Authors.Domain.Author", b =>
                {
                    b.HasBaseType("IHFiction.Data.Authors.Domain.User");

                    b.HasDiscriminator().HasValue("Author");
                });

            modelBuilder.Entity("IHFiction.Data.Searching.Domain.CanonicalTag", b =>
                {
                    b.HasBaseType("IHFiction.Data.Searching.Domain.Tag");

                    b.ToTable("tags", "ihfiction.dev2");

                    b.HasDiscriminator().HasValue("CanonicalTag");
                });

            modelBuilder.Entity("IHFiction.Data.Searching.Domain.SynonymTag", b =>
                {
                    b.HasBaseType("IHFiction.Data.Searching.Domain.Tag");

                    b.Property<string>("CanonicalTagId")
                        .IsRequired()
                        .HasColumnType("character varying(26)")
                        .HasColumnName("canonical_tag_id");

                    b.HasIndex("CanonicalTagId")
                        .HasDatabaseName("ix_tags_canonical_tag_id");

                    b.ToTable("tags", "ihfiction.dev2");

                    b.HasDiscriminator().HasValue("SynonymTag");
                });

            modelBuilder.Entity("IHFiction.Data.Stories.Domain.Anthology", b =>
                {
                    b.HasBaseType("IHFiction.Data.Stories.Domain.Work");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.ToTable("work", "ihfiction.dev2");

                    b.HasDiscriminator().HasValue("Anthology");
                });

            modelBuilder.Entity("IHFiction.Data.Stories.Domain.Book", b =>
                {
                    b.HasBaseType("IHFiction.Data.Stories.Domain.Work");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("StoryId")
                        .HasColumnType("character varying(26)")
                        .HasColumnName("story_id");

                    b.HasIndex("StoryId")
                        .HasDatabaseName("ix_work_story_id");

                    b.ToTable("work", "ihfiction.dev2");

                    b.HasDiscriminator().HasValue("Book");
                });

            modelBuilder.Entity("IHFiction.Data.Stories.Domain.Chapter", b =>
                {
                    b.HasBaseType("IHFiction.Data.Stories.Domain.Work");

                    b.Property<string>("BookId")
                        .HasColumnType("character varying(26)")
                        .HasColumnName("book_id");

                    b.Property<string>("StoryId")
                        .HasColumnType("character varying(26)")
                        .HasColumnName("story_id");

                    b.Property<string>("WorkBodyId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("work_body_id");

                    b.HasIndex("BookId")
                        .HasDatabaseName("ix_work_book_id");

                    b.HasIndex("StoryId")
                        .HasDatabaseName("ix_work_story_id");

                    b.HasDiscriminator().HasValue("Chapter");
                });

            modelBuilder.Entity("IHFiction.Data.Stories.Domain.Story", b =>
                {
                    b.HasBaseType("IHFiction.Data.Stories.Domain.Work");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("WorkBodyId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("work_body_id");

                    b.HasDiscriminator().HasValue("Story");
                });

            modelBuilder.Entity("AnthologyStory", b =>
                {
                    b.HasOne("IHFiction.Data.Stories.Domain.Anthology", null)
                        .WithMany()
                        .HasForeignKey("AnthologiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_anthology_story_work_anthologies_id");

                    b.HasOne("IHFiction.Data.Stories.Domain.Story", null)
                        .WithMany()
                        .HasForeignKey("StoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_anthology_story_stories_stories_id");
                });

            modelBuilder.Entity("AuthorWork", b =>
                {
                    b.HasOne("IHFiction.Data.Authors.Domain.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_author_work_authors_authors_id");

                    b.HasOne("IHFiction.Data.Stories.Domain.Work", null)
                        .WithMany()
                        .HasForeignKey("WorksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_author_work_work_works_id");
                });

            modelBuilder.Entity("IHFiction.Data.Stories.Domain.Work", b =>
                {
                    b.HasOne("IHFiction.Data.Authors.Domain.Author", "Owner")
                        .WithMany("OwnedWorks")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_work_authors_owner_id");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("TagWork", b =>
                {
                    b.HasOne("IHFiction.Data.Searching.Domain.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tag_work_tags_tags_id");

                    b.HasOne("IHFiction.Data.Stories.Domain.Work", null)
                        .WithMany()
                        .HasForeignKey("WorksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tag_work_work_works_id");
                });

            modelBuilder.Entity("IHFiction.Data.Authors.Domain.Author", b =>
                {
                    b.OwnsOne("IHFiction.Data.Authors.Domain.Profile", "Profile", b1 =>
                        {
                            b1.Property<string>("AuthorId")
                                .HasColumnType("character varying(26)")
                                .HasColumnName("id");

                            b1.Property<string>("Bio")
                                .HasColumnType("text")
                                .HasColumnName("profile_bio");

                            b1.HasKey("AuthorId");

                            b1.ToTable("users", "ihfiction.dev2");

                            b1.WithOwner()
                                .HasForeignKey("AuthorId")
                                .HasConstraintName("fk_authors_authors_id");
                        });

                    b.Navigation("Profile")
                        .IsRequired();
                });

            modelBuilder.Entity("IHFiction.Data.Searching.Domain.SynonymTag", b =>
                {
                    b.HasOne("IHFiction.Data.Searching.Domain.CanonicalTag", "CanonicalTag")
                        .WithMany("Synonyms")
                        .HasForeignKey("CanonicalTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tags_tags_canonical_tag_id");

                    b.Navigation("CanonicalTag");
                });

            modelBuilder.Entity("IHFiction.Data.Stories.Domain.Book", b =>
                {
                    b.HasOne("IHFiction.Data.Stories.Domain.Story", "Story")
                        .WithMany("Books")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_work_stories_story_id");

                    b.Navigation("Story");
                });

            modelBuilder.Entity("IHFiction.Data.Stories.Domain.Chapter", b =>
                {
                    b.HasOne("IHFiction.Data.Stories.Domain.Book", "Book")
                        .WithMany("Chapters")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_work_work_book_id");

                    b.HasOne("IHFiction.Data.Stories.Domain.Story", "Story")
                        .WithMany("Chapters")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_work_work_story_id");

                    b.Navigation("Book");

                    b.Navigation("Story");
                });

            modelBuilder.Entity("IHFiction.Data.Authors.Domain.Author", b =>
                {
                    b.Navigation("OwnedWorks");
                });

            modelBuilder.Entity("IHFiction.Data.Searching.Domain.CanonicalTag", b =>
                {
                    b.Navigation("Synonyms");
                });

            modelBuilder.Entity("IHFiction.Data.Stories.Domain.Book", b =>
                {
                    b.Navigation("Chapters");
                });

            modelBuilder.Entity("IHFiction.Data.Stories.Domain.Story", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Chapters");
                });
#pragma warning restore 612, 618
        }
    }
}
